name: GH

on:
  pull_request:
  push:
    branches: master
  release:
    types: [released, prereleased]
  workflow_dispatch:  # allows running workflow manually from the Actions tab

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['2.7', '3.x']
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      if: matrix.python-version != '2.7'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Python 2
      if: matrix.python-version == '2.7'
      run: |
        sudo rm -f $(which python) $(which pip)
        sudo apt-get install python2.7-dev
        curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
        python2.7 get-pip.py
        sudo ln -sf "$(which python2.7)" "$(dirname $(which python2.7))/python"

    - name: Pip cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Pre-commit cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit-${{ matrix.python-version }}-${{ hashFiles('**/requirements/ci.txt') }}-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pre-commit-

    - name: Install dependencies
      run: |
        pip install -U pip setuptools wheel
        make install

    - name: Lint
      if: matrix.python-version == '3.x'
      run: make lint

    - name: Test
      run: make test


  build-sdist:
    runs-on: ubuntu-latest

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Build source distribution
      run: |
        pip install -U setuptools wheel pip
        python setup.py sdist

    - uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/*.tar.*


  build-wheels-matrix:
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: pip install cibuildwheel==2.13.1
      - id: set-matrix
        run: |
          MATRIX_INCLUDE=$(
            {
              CIBW_PROJECT_REQUIRES_PYTHON="==3.6.*" cibuildwheel --print-build-identifiers --platform linux --arch x86_64,aarch64 | grep cp | grep many | jq -nRc '{"only": inputs, "os": "ubuntu-latest"}' \
              && CIBW_PROJECT_REQUIRES_PYTHON="==3.6.*" cibuildwheel --print-build-identifiers --platform macos --arch x86_64,arm64 | grep cp |  jq -nRc '{"only": inputs, "os": "macos-latest"}' \
              && CIBW_PROJECT_REQUIRES_PYTHON="==3.8.*" cibuildwheel --print-build-identifiers --platform macos --arch arm64 | grep cp |  jq -nRc '{"only": inputs, "os": "macos-latest"}' \
              && CIBW_PROJECT_REQUIRES_PYTHON="==3.6.*" cibuildwheel --print-build-identifiers --platform windows --arch x86,AMD64 | grep cp |  jq -nRc '{"only": inputs, "os": "windows-latest"}'
            } | jq -sc
          )
          echo "include=$MATRIX_INCLUDE" >> $GITHUB_OUTPUT


  build-wheels:
    needs: build-wheels-matrix
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.only }}

    strategy:
      matrix:
        include: ${{ fromJson(needs.build-wheels-matrix.outputs.include) }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v2

    - uses: pypa/cibuildwheel@v2.13.1
      with:
        only: ${{ matrix.only }}
      env:
        CIBW_BUILD_VERBOSITY: 1
        CIBW_BEFORE_BUILD: 'bash -c "make install_libmagic"'

    - uses: actions/upload-artifact@v3
      with:
        name: dist
        path: wheelhouse/*.whl


  publish:
    needs: [tests, build-sdist, build-wheels]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - run: ls -ltra dist/

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        tag_name: ${{ github.ref }}

    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
